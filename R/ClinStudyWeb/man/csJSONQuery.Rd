\name{csJSONQuery}
\alias{csJSONQuery}

\title{ Query the ClinStudyWeb database via its JSON API }
\description{
  Generic database queries using an API based on the perl
  DBIx::Class::ResultSet module.
}
\usage{
csJSONQuery( resultSet, condition=NULL, attributes=NULL,
             uri, .opts=list(), cred=NULL )
}
\arguments{

  \item{resultSet}{The name of the perl ORM ResultSet class to use as a
    base for queries.}

  \item{condition}{A list of conditions to apply in the constructed SQL
    WHERE clause.}

  \item{attributes}{A list, quite possibly nested, giving database query
    attributes as used by DBIx::Class::ResultSet. This can be used to
    join across tables in the database.}

  \item{uri}{The top-level URI for the clinical database web site.}

  \item{.opts}{A list of CURLOptions passed to
    \code{getURLContent}. This can be used, for example, to deactivate SSL
    certificate checking using \code{list(ssl.verifypeer=FALSE)}. }

  \item{cred}{A list containing username and password elements as
    generated by \code{getCredentials()}.}

}
\details{

  This function is intended for advanced users only; it relies on
  knowledge of composing complex SQL::Abstract queries which will not be
  documented here. Please see the perl DBIx::Class::ResultSet
  documentation for how this function may be used.

}
\value{

  A list of lists; each sub-list corresponds to a row in the joined
  resultset giving values for each column.

}
\references{ RCurl package, rjson package }
\author{ Tim F Rayner }
\seealso{
  \code{\link{csFindAssays}}
}
\examples{
  \dontrun{
 x <- csJSONQuery('Assay',
                  condition=list(
                    'cell_type_id.value'='CD19',
                    'platform_id.value'='MEDIANTE'),
                  attributes=list(join=c(
                                    list(channels=list(sample_id='cell_type_id')),
                                    list(assay_batch_id='platform_id'))
                    ),
                  cred=cred,
                  uri=uri)
  }
}

