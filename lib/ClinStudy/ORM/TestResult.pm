use utf8;
package ClinStudy::ORM::TestResult;

# Created by DBIx::Class::Schema::Loader
# DO NOT MODIFY THE FIRST PART OF THIS FILE

=head1 NAME

ClinStudy::ORM::TestResult

=cut

use strict;
use warnings;

use base 'DBIx::Class::Core';

=head1 TABLE: C<test_result>

=cut

__PACKAGE__->table("test_result");

=head1 ACCESSORS

=head2 id

  data_type: 'integer'
  is_auto_increment: 1
  is_nullable: 0

=head2 test_id

  data_type: 'integer'
  is_foreign_key: 1
  is_nullable: 0

=head2 visit_id

  data_type: 'integer'
  is_foreign_key: 1
  is_nullable: 0

=head2 value

  data_type: 'varchar'
  is_nullable: 1
  size: 255

=head2 controlled_value_id

  data_type: 'integer'
  is_foreign_key: 1
  is_nullable: 1

=head2 date

  data_type: 'date'
  is_nullable: 0

=head2 needs_reparenting

  data_type: 'tinyint'
  is_nullable: 1

=cut

__PACKAGE__->add_columns(
  "id",
  { data_type => "integer", is_auto_increment => 1, is_nullable => 0 },
  "test_id",
  { data_type => "integer", is_foreign_key => 1, is_nullable => 0 },
  "visit_id",
  { data_type => "integer", is_foreign_key => 1, is_nullable => 0 },
  "value",
  { data_type => "varchar", is_nullable => 1, size => 255 },
  "controlled_value_id",
  { data_type => "integer", is_foreign_key => 1, is_nullable => 1 },
  "date",
  { data_type => "date", is_nullable => 0 },
  "needs_reparenting",
  { data_type => "tinyint", is_nullable => 1 },
);

=head1 PRIMARY KEY

=over 4

=item * L</id>

=back

=cut

__PACKAGE__->set_primary_key("id");

=head1 UNIQUE CONSTRAINTS

=head2 C<test_id_2>

=over 4

=item * L</test_id>

=item * L</date>

=item * L</visit_id>

=back

=cut

__PACKAGE__->add_unique_constraint("test_id_2", ["test_id", "date", "visit_id"]);

=head1 RELATIONS

=head2 controlled_value_id

Type: belongs_to

Related object: L<ClinStudy::ORM::ControlledVocab>

=cut

__PACKAGE__->belongs_to(
  "controlled_value_id",
  "ClinStudy::ORM::ControlledVocab",
  { id => "controlled_value_id" },
);

=head2 test_aggregation_aggregate_result_ids

Type: has_many

Related object: L<ClinStudy::ORM::TestAggregation>

=cut

__PACKAGE__->has_many(
  "test_aggregation_aggregate_result_ids",
  "ClinStudy::ORM::TestAggregation",
  { "foreign.aggregate_result_id" => "self.id" },
  {},
);

=head2 test_aggregation_test_result_ids

Type: has_many

Related object: L<ClinStudy::ORM::TestAggregation>

=cut

__PACKAGE__->has_many(
  "test_aggregation_test_result_ids",
  "ClinStudy::ORM::TestAggregation",
  { "foreign.test_result_id" => "self.id" },
  {},
);

=head2 test_id

Type: belongs_to

Related object: L<ClinStudy::ORM::Test>

=cut

__PACKAGE__->belongs_to("test_id", "ClinStudy::ORM::Test", { id => "test_id" });

=head2 visit_id

Type: belongs_to

Related object: L<ClinStudy::ORM::Visit>

=cut

__PACKAGE__->belongs_to("visit_id", "ClinStudy::ORM::Visit", { id => "visit_id" });


# Created by DBIx::Class::Schema::Loader v0.07015 @ 2012-02-09 15:54:00
# DO NOT MODIFY THIS OR ANYTHING ABOVE! md5sum:j/1N3tjUn23rJ4rxOi125w


# You can replace this text with custom content, and it will be preserved on regeneration

# This cascading delete is only allowed from the child result, not the
# parent. FIXME note the custom relationship name here, to be used in
# preference to the autogenerated name above which will one day be
# deleted.
__PACKAGE__->has_many(
  "child_test_result_ids",
  "ClinStudy::ORM::TestAggregation",
  { "foreign.aggregate_result_id" => "self.id" },
  { "cascade_delete"   => 0 },
);

# Many-to-many relationships are not yet autogenerated by
# DBIx::Class::Schema::Loader. We add them here:
__PACKAGE__->many_to_many(
    "parent_test_results" => "test_aggregation_test_result_ids", "aggregate_result_id",
  { "cascade_delete"   => 0 },
);
__PACKAGE__->many_to_many(
    "child_test_results" => "child_test_result_ids", "test_result_id",
  { "cascade_delete"   => 0 },
);

1;
