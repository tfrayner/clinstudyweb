use utf8;
package ClinStudy::ORM::Hospitalisation;

# Created by DBIx::Class::Schema::Loader
# DO NOT MODIFY THE FIRST PART OF THIS FILE

=head1 NAME

ClinStudy::ORM::Hospitalisation

=cut

use strict;
use warnings;

use base 'DBIx::Class::Core';

=head1 TABLE: C<hospitalisation>

=cut

__PACKAGE__->table("hospitalisation");

=head1 ACCESSORS

=head2 id

  data_type: 'integer'
  is_auto_increment: 1
  is_nullable: 0

=head2 patient_id

  data_type: 'integer'
  is_foreign_key: 1
  is_nullable: 0

=head2 date

  data_type: 'date'
  is_nullable: 0

=head2 days_duration

  data_type: 'integer'
  is_nullable: 1

=head2 postop_days_duration

  data_type: 'integer'
  is_nullable: 1

=head2 reason_for_admission

  data_type: 'varchar'
  is_nullable: 1
  size: 255

=head2 notes

  data_type: 'text'
  is_nullable: 1

=cut

__PACKAGE__->add_columns(
  "id",
  { data_type => "integer", is_auto_increment => 1, is_nullable => 0 },
  "patient_id",
  { data_type => "integer", is_foreign_key => 1, is_nullable => 0 },
  "date",
  { data_type => "date", is_nullable => 0 },
  "days_duration",
  { data_type => "integer", is_nullable => 1 },
  "postop_days_duration",
  { data_type => "integer", is_nullable => 1 },
  "reason_for_admission",
  { data_type => "varchar", is_nullable => 1, size => 255 },
  "notes",
  { data_type => "text", is_nullable => 1 },
);

=head1 PRIMARY KEY

=over 4

=item * L</id>

=back

=cut

__PACKAGE__->set_primary_key("id");

=head1 UNIQUE CONSTRAINTS

=head2 C<patient_id>

=over 4

=item * L</patient_id>

=item * L</date>

=back

=cut

__PACKAGE__->add_unique_constraint("patient_id", ["patient_id", "date"]);

=head1 RELATIONS

=head2 drugs

Type: has_many

Related object: L<ClinStudy::ORM::Drug>

=cut

__PACKAGE__->has_many(
  "drugs",
  "ClinStudy::ORM::Drug",
  { "foreign.hospitalisation_id" => "self.id" },
  {},
);

=head2 patient_id

Type: belongs_to

Related object: L<ClinStudy::ORM::Patient>

=cut

__PACKAGE__->belongs_to(
  "patient_id",
  "ClinStudy::ORM::Patient",
  { id => "patient_id" },
);

=head2 test_results

Type: has_many

Related object: L<ClinStudy::ORM::TestResult>

=cut

__PACKAGE__->has_many(
  "test_results",
  "ClinStudy::ORM::TestResult",
  { "foreign.hospitalisation_id" => "self.id" },
  {},
);

=head2 transplants

Type: has_many

Related object: L<ClinStudy::ORM::Transplant>

=cut

__PACKAGE__->has_many(
  "transplants",
  "ClinStudy::ORM::Transplant",
  { "foreign.hospitalisation_id" => "self.id" },
  {},
);


# Created by DBIx::Class::Schema::Loader v0.07015 @ 2011-12-12 13:28:19
# DO NOT MODIFY THIS OR ANYTHING ABOVE! md5sum://Mu3KeEfhcxtSkWfQStbw


# You can replace this text with custom content, and it will be preserved on regeneration

# Custom has_many so that we track the cascade_delete behaviour of the
# database correctly (D::C::Schema::Loader doesn't do this yet). These
# relationships replace the autogenerated ones above, and the latter
# can be deleted when we're finally done with D::C::S::L). FIXME

__PACKAGE__->has_many(
  "transplants",
  "ClinStudy::ORM::Transplant",
  { "foreign.hospitalisation_id" => "self.id" },
  { "cascade_delete"             => 0 },
);
__PACKAGE__->has_many(
  "drugs",
  "ClinStudy::ORM::Drug",
  { "foreign.hospitalisation_id" => "self.id" },
  { "cascade_delete"             => 0 },
);
__PACKAGE__->has_many(
  "test_results",
  "ClinStudy::ORM::TestResult",
  { "foreign.hospitalisation_id" => "self.id" },
  { "cascade_delete"             => 0 },
);

1;
