package ClinStudy::ORM::Test;

use strict;
use warnings;

use base 'DBIx::Class';

__PACKAGE__->load_components("Core");
__PACKAGE__->table("test");
__PACKAGE__->add_columns(
  "id",
  { data_type => "INT", default_value => undef, is_nullable => 0, size => 11 },
  "name",
  {
    data_type => "VARCHAR",
    default_value => undef,
    is_nullable => 0,
    size => 255,
  },
);
__PACKAGE__->set_primary_key("id");
__PACKAGE__->add_unique_constraint("name", ["name"]);
__PACKAGE__->has_many(
  "test_possible_values",
  "ClinStudy::ORM::TestPossibleValue",
  { "foreign.test_id" => "self.id" },
);
__PACKAGE__->has_many(
  "test_results",
  "ClinStudy::ORM::TestResult",
  { "foreign.test_id" => "self.id" },
);


# Created by DBIx::Class::Schema::Loader v0.04006 @ 2009-11-26 11:03:31
# DO NOT MODIFY THIS OR ANYTHING ABOVE! md5sum:l58LiKlRXoip4ApZ9AOo0g


# You can replace this text with custom content, and it will be preserved on regeneration

# Custom has_many so that we track the cascade_delete behaviour of the
# database correctly (D::C::Schema::Loader doesn't do this yet). These
# relationships replace the autogenerated ones above, and the latter
# can be deleted when we're finally done with D::C::S::L). FIXME

__PACKAGE__->has_many(
  "test_results",
  "ClinStudy::ORM::TestResult",
  { "foreign.test_id" => "self.id" },
  { "cascade_delete"  => 0 },
);

# Many-to-many relationships are not yet autogenerated by
# DBIx::Class::Schema::Loader. We add them here:

# (NOTE that this is a one-way relationship, will need to add similar
# to ControlledVocab.pm if we ever want to navigate in the reverse
# direction).
__PACKAGE__->many_to_many(
    "possible_values" => "test_possible_values", "possible_value_id"
);

1;
