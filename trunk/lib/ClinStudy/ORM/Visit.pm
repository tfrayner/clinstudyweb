package ClinStudy::ORM::Visit;

use strict;
use warnings;

use base 'DBIx::Class';

__PACKAGE__->load_components("Core");
__PACKAGE__->table("visit");
__PACKAGE__->add_columns(
  "id",
  { data_type => "INT", default_value => undef, is_nullable => 0, size => 11 },
  "date",
  { data_type => "DATE", default_value => undef, is_nullable => 0, size => 10 },
  "notes",
  {
    data_type => "TEXT",
    default_value => undef,
    is_nullable => 1,
    size => 65535,
  },
  "disease_activity_id",
  { data_type => "INT", default_value => undef, is_nullable => 1, size => 11 },
  "patient_id",
  { data_type => "INT", default_value => undef, is_nullable => 0, size => 11 },
  "nominal_timepoint_id",
  { data_type => "INT", default_value => undef, is_nullable => 1, size => 11 },
);
__PACKAGE__->set_primary_key("id");
__PACKAGE__->add_unique_constraint("patient_id_2", ["patient_id", "date"]);
__PACKAGE__->has_many(
  "drugs",
  "ClinStudy::ORM::Drug",
  { "foreign.visit_id" => "self.id" },
);
__PACKAGE__->has_many(
  "samples",
  "ClinStudy::ORM::Sample",
  { "foreign.visit_id" => "self.id" },
);
__PACKAGE__->has_many(
  "test_results",
  "ClinStudy::ORM::TestResult",
  { "foreign.visit_id" => "self.id" },
);
__PACKAGE__->belongs_to(
  "patient_id",
  "ClinStudy::ORM::Patient",
  { id => "patient_id" },
);
__PACKAGE__->belongs_to(
  "disease_activity_id",
  "ClinStudy::ORM::ControlledVocab",
  { id => "disease_activity_id" },
);
__PACKAGE__->belongs_to(
  "nominal_timepoint_id",
  "ClinStudy::ORM::ControlledVocab",
  { id => "nominal_timepoint_id" },
);
__PACKAGE__->has_many(
  "visit_emergent_groups",
  "ClinStudy::ORM::VisitEmergentGroup",
  { "foreign.visit_id" => "self.id" },
);


# Created by DBIx::Class::Schema::Loader v0.04006 @ 2009-10-23 13:53:03
# DO NOT MODIFY THIS OR ANYTHING ABOVE! md5sum:v2jIbXcAwYUI8kf3hSuT7A


# You can replace this text with custom content, and it will be preserved on regeneration

# Custom has_many so that we track the cascade_delete behaviour of the
# database correctly (D::C::Schema::Loader doesn't do this yet). These
# relationships replace the autogenerated ones above, and the latter
# can be deleted when we're finally done with D::C::S::L). FIXME
__PACKAGE__->has_many(
  "drugs",
  "ClinStudy::ORM::Drug",
  { "foreign.visit_id" => "self.id" },
  { "cascade_delete"   => 0 },
);
__PACKAGE__->has_many(
  "samples",
  "ClinStudy::ORM::Sample",
  { "foreign.visit_id" => "self.id" },
  { "cascade_delete"   => 0 },
);
__PACKAGE__->has_many(
  "test_results",
  "ClinStudy::ORM::TestResult",
  { "foreign.visit_id" => "self.id" },
  { "cascade_delete"   => 0 },
);

# Many-to-many relationships are not yet autogenerated by
# DBIx::Class::Schema::Loader. We add them here:
__PACKAGE__->many_to_many(
    "emergent_groups" => "visit_emergent_groups", "emergent_group_id"
);

1;
