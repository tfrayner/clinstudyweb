package ClinStudy::ORM::Patient;

use strict;
use warnings;

use base 'DBIx::Class';

__PACKAGE__->load_components("Core");
__PACKAGE__->table("patient");
__PACKAGE__->add_columns(
  "id",
  { data_type => "INT", default_value => undef, is_nullable => 0, size => 11 },
  "surname",
  {
    data_type => "VARCHAR",
    default_value => undef,
    is_nullable => 1,
    size => 255,
  },
  "firstname",
  {
    data_type => "VARCHAR",
    default_value => undef,
    is_nullable => 1,
    size => 255,
  },
  "date_of_birth",
  { data_type => "DATE", default_value => undef, is_nullable => 1, size => 10 },
  "sex",
  { data_type => "CHAR", default_value => undef, is_nullable => 1, size => 1 },
  "trial_id",
  {
    data_type => "VARCHAR",
    default_value => undef,
    is_nullable => 0,
    size => 15,
  },
  "hospital_id",
  { data_type => "INT", default_value => undef, is_nullable => 1, size => 11 },
  "ethnicity_id",
  { data_type => "INT", default_value => undef, is_nullable => 1, size => 11 },
  "home_centre_id",
  { data_type => "INT", default_value => undef, is_nullable => 1, size => 11 },
  "entry_date",
  { data_type => "DATE", default_value => undef, is_nullable => 0, size => 10 },
  "notes",
  {
    data_type => "TEXT",
    default_value => undef,
    is_nullable => 1,
    size => 65535,
  },
);
__PACKAGE__->set_primary_key("id");
__PACKAGE__->add_unique_constraint("hospital_id", ["hospital_id"]);
__PACKAGE__->add_unique_constraint("trial_id", ["trial_id"]);
__PACKAGE__->has_many(
  "adverse_events",
  "ClinStudy::ORM::AdverseEvent",
  { "foreign.patient_id" => "self.id" },
);
__PACKAGE__->has_many(
  "clinical_features",
  "ClinStudy::ORM::ClinicalFeature",
  { "foreign.patient_id" => "self.id" },
);
__PACKAGE__->has_many(
  "comorbidities",
  "ClinStudy::ORM::Comorbidity",
  { "foreign.patient_id" => "self.id" },
);
__PACKAGE__->has_many(
  "diagnoses",
  "ClinStudy::ORM::Diagnosis",
  { "foreign.patient_id" => "self.id" },
);
__PACKAGE__->has_many(
  "disease_events",
  "ClinStudy::ORM::DiseaseEvent",
  { "foreign.patient_id" => "self.id" },
);
__PACKAGE__->has_many(
  "hospitalisations",
  "ClinStudy::ORM::Hospitalisation",
  { "foreign.patient_id" => "self.id" },
);
__PACKAGE__->belongs_to(
  "ethnicity_id",
  "ClinStudy::ORM::ControlledVocab",
  { id => "ethnicity_id" },
);
__PACKAGE__->belongs_to(
  "home_centre_id",
  "ClinStudy::ORM::ControlledVocab",
  { id => "home_centre_id" },
);
__PACKAGE__->has_many(
  "patient_prior_groups",
  "ClinStudy::ORM::PatientPriorGroup",
  { "foreign.patient_id" => "self.id" },
);
__PACKAGE__->has_many(
  "prior_observations",
  "ClinStudy::ORM::PriorObservation",
  { "foreign.patient_id" => "self.id" },
);
__PACKAGE__->has_many(
  "prior_treatments",
  "ClinStudy::ORM::PriorTreatment",
  { "foreign.patient_id" => "self.id" },
);
__PACKAGE__->has_many(
  "risk_factors",
  "ClinStudy::ORM::RiskFactor",
  { "foreign.patient_id" => "self.id" },
);
__PACKAGE__->has_many(
  "studies",
  "ClinStudy::ORM::Study",
  { "foreign.patient_id" => "self.id" },
);
__PACKAGE__->has_many(
  "system_involvements",
  "ClinStudy::ORM::SystemInvolvement",
  { "foreign.patient_id" => "self.id" },
);
__PACKAGE__->has_many(
  "visits",
  "ClinStudy::ORM::Visit",
  { "foreign.patient_id" => "self.id" },
);


# Created by DBIx::Class::Schema::Loader v0.04006 @ 2010-02-26 11:28:22
# DO NOT MODIFY THIS OR ANYTHING ABOVE! md5sum:CO5Heb5tljHFxqvvLXilGA


# You can replace this text with custom content, and it will be preserved on regeneration

# Custom has_many so that we track the cascade_delete behaviour of the
# database correctly (D::C::Schema::Loader doesn't do this yet). These
# relationships replace the autogenerated ones above, and the latter
# can be deleted when we're finally done with D::C::S::L). FIXME

__PACKAGE__->has_many(
  "adverse_events",
  "ClinStudy::ORM::AdverseEvent",
  { "foreign.patient_id" => "self.id" },
  { "cascade_delete"     => 0 },
);
__PACKAGE__->has_many(
  "visits",
  "ClinStudy::ORM::Visit",
  { "foreign.patient_id" => "self.id" },
  { "cascade_delete"     => 0 },
);
__PACKAGE__->has_many(
  "hospitalisations",
  "ClinStudy::ORM::Hospitalisation",
  { "foreign.patient_id" => "self.id" },
  { "cascade_delete"     => 0 },
);
__PACKAGE__->has_many(
  "diagnoses",
  "ClinStudy::ORM::Diagnosis",
  { "foreign.patient_id" => "self.id" },
  { "cascade_delete"     => 0 },
);
__PACKAGE__->has_many(
  "disease_events",
  "ClinStudy::ORM::DiseaseEvent",
  { "foreign.patient_id" => "self.id" },
  { "cascade_delete"     => 0 },
);
__PACKAGE__->has_many(
  "comorbidities",
  "ClinStudy::ORM::Comorbidity",
  { "foreign.patient_id" => "self.id" },
  { "cascade_delete"     => 0 },
);
__PACKAGE__->has_many(
  "prior_observations",
  "ClinStudy::ORM::PriorObservation",
  { "foreign.patient_id" => "self.id" },
  { "cascade_delete"     => 0 },
);
__PACKAGE__->has_many(
  "prior_treatments",
  "ClinStudy::ORM::PriorTreatment",
  { "foreign.patient_id" => "self.id" },
  { "cascade_delete"     => 0 },
);
__PACKAGE__->has_many(
  "risk_factors",
  "ClinStudy::ORM::RiskFactor",
  { "foreign.patient_id" => "self.id" },
  { "cascade_delete"     => 0 },
);
__PACKAGE__->has_many(
  "studies",
  "ClinStudy::ORM::Study",
  { "foreign.patient_id" => "self.id" },
  { "cascade_delete"     => 0 },
);

# Many-to-many relationships are not yet autogenerated by
# DBIx::Class::Schema::Loader. We add them here:

# (NOTE that this is a one-way relationship, will need to add similar
# to ControlledVocab.pm if we ever want to navigate in the reverse
# direction).
__PACKAGE__->many_to_many(
    "system_involvement_types" => "system_involvements", "type_id"
);
__PACKAGE__->many_to_many(
    "clinical_feature_types" => "clinical_features", "type_id"
);
__PACKAGE__->many_to_many(
    "risk_factor_types" => "risk_factors", "type_id"
);
__PACKAGE__->many_to_many(
    "prior_groups" => "patient_prior_groups", "prior_group_id"
);

1;
